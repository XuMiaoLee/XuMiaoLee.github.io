{"pages":[{"title":"","text":"博主还没有留下印记哦~","link":"/about/index.html"}],"posts":[{"title":"欢迎大家来到我的个人博客~","text":"~ unsplash-logoSergi Ferrete","link":"/2018/02/07/HelloWorld/"},{"title":"替换及重置Homebrew默认源","text":"Homebrew是macOS下的包管理工具，因为国外的源会特别慢卡着不动，无奈之下只能选择替换为国内的，这里选择的是中科大的源。 替换1234567替换brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.ustc.edu.cn/brew.git替换homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git 重置官方源1234567重置brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://github.com/Homebrew/brew.git重置homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://github.com/Homebrew/homebrew-core.git 参考资料https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git unsplash-logoHudai Gayiran","link":"/2019/08/21/杂七杂八/替换及重置Homebrew默认源/"},{"title":"Nginx常用技巧","text":"隐藏nginx服务信息头 隐藏nginx版本信息（nginx.conf） 123http { server_tokens off;} 隐藏nginx标识 nginx源码目录：/nginx-1.15.1/src/http/ngx_http_header_filter_module.c 修改 48、49行代码： 12static u_char ngx_http_server_string[] = &quot;Server: XXX&quot; CRLF;static u_char ngx_http_server_full_string[] = &quot;Server: XXX&quot; CRLF; 重新编译nginx，关于编译参数可以使用nginx -V查看 123$ ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_geoip_module --with-http_stub_status_module --with-http_sub_module --with-stream --with-stream=dynamic$ make make之后在objs目录下就多了个nginx，这个就是新编译后的版本程序了，接着我们备份原有nginx程序 1$ mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak 拷贝到编译好的objs下的nginx到sbin目录下 1$ cp objs/nginx /usr/local/nginx/sbin/nginx 停止并启动nginx 12$ pkill -9 nginx$ /usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf 按天数切割access.log cut_nginx_log.sh 1234567891011121314151617181920#!/bin/bash##零点执行该脚本##nginx日志文件所在的目录LOGS_PATH=/data/log/nginx##获取昨天的yyyy-MM-ddYESTERDAY=$(date -d \"yesterday\" +%Y-%m-%d)##移动文件mv ${LOGS_PATH}/access.log ${LOGS_PATH}/access_${YESTERDAY}.log##向nginx主进程发送USR1信号，USR1信号是重新打开日志文件kill -USR1 `ps axu | grep \"nginx: master process\" | grep -v grep | awk '{print $2}'`##删除7天前的日志cd ${LOGS_PATH}find . -mtime +7 -name \"access_*\" | xargs rm -fexit 0 执行 crontab -e 添加定时脚本,每天凌晨0点执行任务 10 0 * * * sh /var/log/nginx/cut_nginx_log.sh unsplash-logoJR Korpa","link":"/2018/02/07/运维/Nginx常用技巧/"},{"title":"构建SpringBoot应用Docker镜像","text":"构建SpringBoot应用Docker镜像准备工作使用到的工具及运行环境： JDK 1.8 及以上 Gradle 4+ 或 Maven 3.2+ 开发工具 Spring Tool Suite (STS) IntelliJ IDEA 创建SpringBoot应用这边我是使用 IntelliJ IDEA 创建的，你也可以通过这种方式创建然后导入到IDE中 http://start.spring.io/ 在 pom.xml 中添加 docker maven插件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.9.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.xumiao&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-docker&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;spring-boot-docker&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;docker.image.prefix&gt;springio&lt;/docker.image.prefix&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--build docker image--&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.4.9&lt;/version&gt; &lt;configuration&gt; &lt;repository&gt;${docker.image.prefix}/${project.artifactId}&lt;/repository&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- tag::unpack[] --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;unpack&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;unpack&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;artifactItems&gt; &lt;artifactItem&gt; &lt;groupId&gt;${project.groupId}&lt;/groupId&gt; &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/artifactItem&gt; &lt;/artifactItems&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- end::unpack[] --&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 在 SpringBootApplication 启动文件中添加个简单的路由： 1234567891011121314@SpringBootApplication@RestControllerpublic class Application { @RequestMapping(\"/\") public String home() { return \"Hello Docker World\"; } public static void main(String[] args) { SpringApplication.run(Application.class, args); }} 编写Dockerfile在项目根目录创建 Dockerfile 文件，内容如下，启动类名全路径根据实际情况填写 1234567FROM openjdk:8-jdk-alpineVOLUME /tmpARG DEPENDENCY=target/dependencyCOPY ${DEPENDENCY}/BOOT-INF/lib /app/libCOPY ${DEPENDENCY}/META-INF /app/META-INFCOPY ${DEPENDENCY}/BOOT-INF/classes /appENTRYPOINT [\"java\",\"-cp\",\"app:app/lib/*\",\"com.xumiao.springboot.docker.Application\"] FROM：基于openjdk镜像进行构建；第一条指令必须为FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM 指令（每个镜像一次）。 VOLUME： 指向了一个 /tmp 的目录，由于 SpringBoot 使用内置的Tomcat容器，Tomcat 默认使用 /tmp 作为工作目录。效果就是在主机的 /var/lib/docker 目录下创建了一个临时文件，并连接到容器的/tmp；如果应用中有对文件系统进行写操作这个是必须要写的。 ARG：设置构建参数 COPY：复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的 app 目录下 ENTRYPOINT：配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效。 上面命令参考以下资料 https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/dockerfile_details.htmlhttps://yeasy.gitbooks.io/docker_practice/image/dockerfile/ 构建 Docker 镜像启动 Docker 后在应用下目录执行以下 maven 命令开始构建 1mvn install dockerfile:build 执行完成后我们查看下构建好的 docker 镜像（docker image ps），如下： 12springio/spring-boot-docker latest 436d7666f2f3 About a minute ago 122MBopenjdk 8-jdk-alpine a3562aa0b991 5 months ago 105MB 运行 Docker 镜像通过以下命令创建 docker 容器并运行： 1234567891011121314151617181920docker run -p 8080:8080 -t springio/spring-boot-docker . ____ _ __ _ _ /\\\\ / ___&apos;_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | &apos;_ | &apos;_| | &apos;_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.1.9.RELEASE)2019-10-24 13:33:09.064 INFO 1 --- [ main] c.xumiao.springboot.docker.Application : Starting Application on 9a8a14b6d1ec with PID 1 (/app started by root in /)2019-10-24 13:33:09.067 INFO 1 --- [ main] c.xumiao.springboot.docker.Application : No active profile set, falling back to default profiles: default2019-10-24 13:33:10.335 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)2019-10-24 13:33:10.374 INFO 1 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]2019-10-24 13:33:10.374 INFO 1 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.26]2019-10-24 13:33:10.525 INFO 1 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext2019-10-24 13:33:10.525 INFO 1 --- [ main] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 1384 ms2019-10-24 13:33:10.723 INFO 1 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService &apos;applicationTaskExecutor&apos;2019-10-24 13:33:10.883 INFO 1 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;2019-10-24 13:33:10.886 INFO 1 --- [ main] c.xumiao.springboot.docker.Application : Started Application in 2.279 seconds (JVM running for 2.619) 我们通过docker ps查看一下容器运行情况： 1234docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9a8a14b6d1ec springio/spring-boot-docker &quot;java -cp app:app/li…&quot; 4 minutes ago Up 4 minutes 0.0.0.0:8080-&gt;8080/tcp elegant_goldwasser 接着在浏览器访问http://localhost:8080可以看到“Hello Docker World”结果，大功告成！ 参考资料https://spring.io/guides/gs/spring-boot-Docker/ https://lw900925.github.io/docker/docker-springboot.html","link":"/2019/10/24/Java/spring-boot-docker/"}],"tags":[{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"}],"categories":[{"name":"杂七杂八","slug":"杂七杂八","link":"/categories/杂七杂八/"},{"name":"运维","slug":"运维","link":"/categories/运维/"},{"name":"Java","slug":"Java","link":"/categories/Java/"}]}